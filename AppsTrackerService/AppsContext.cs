#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppsTrackerService
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="C:\\Users\\deva\\AppData\\Local\\Temp\\Apps.sdf")]
	public partial class AppsContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertApplication(Application instance);
    partial void UpdateApplication(Application instance);
    partial void DeleteApplication(Application instance);
    partial void InsertAppsToBlock(AppsToBlock instance);
    partial void UpdateAppsToBlock(AppsToBlock instance);
    partial void DeleteAppsToBlock(AppsToBlock instance);
    partial void InsertBlockedApp(BlockedApp instance);
    partial void UpdateBlockedApp(BlockedApp instance);
    partial void DeleteBlockedApp(BlockedApp instance);
    partial void InsertFileLog(FileLog instance);
    partial void UpdateFileLog(FileLog instance);
    partial void DeleteFileLog(FileLog instance);
    partial void InsertLogin(Login instance);
    partial void UpdateLogin(Login instance);
    partial void DeleteLogin(Login instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertScreenshot(Screenshot instance);
    partial void UpdateScreenshot(Screenshot instance);
    partial void DeleteScreenshot(Screenshot instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertWindow(Window instance);
    partial void UpdateWindow(Window instance);
    partial void DeleteWindow(Window instance);
    #endregion
		
		public AppsContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AppsContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AppsContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AppsContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Application> Applications
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<AppsToBlock> AppsToBlocks
		{
			get
			{
				return this.GetTable<AppsToBlock>();
			}
		}
		
		public System.Data.Linq.Table<BlockedApp> BlockedApps
		{
			get
			{
				return this.GetTable<BlockedApp>();
			}
		}
		
		public System.Data.Linq.Table<FileLog> FileLogs
		{
			get
			{
				return this.GetTable<FileLog>();
			}
		}
		
		public System.Data.Linq.Table<Login> Logins
		{
			get
			{
				return this.GetTable<Login>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<Screenshot> Screenshots
		{
			get
			{
				return this.GetTable<Screenshot>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Window> Windows
		{
			get
			{
				return this.GetTable<Window>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Applications")]
	public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ApplicationID;
		
		private string _Name;
		
		private string _FileName;
		
		private string _Version;
		
		private string _Description;
		
		private string _Comments;
		
		private string _Company;
		
		private string _WinName;
		
		private int _UserID;
		
		private EntityRef<User> _User;
		
		private EntitySet<AppsToBlock> _AppsToBlocks;
		
		private EntitySet<BlockedApp> _BlockedApps;
		
		private EntitySet<Window> _Windows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIDChanging(int value);
    partial void OnApplicationIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnWinNameChanging(string value);
    partial void OnWinNameChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public Application()
		{
			this._User = default(EntityRef<User>);
			this._AppsToBlocks = new EntitySet<AppsToBlock>(new Action<AppsToBlock>(this.attach_AppsToBlocks), new Action<AppsToBlock>(this.detach_AppsToBlocks));
			this._BlockedApps = new EntitySet<BlockedApp>(new Action<BlockedApp>(this.attach_BlockedApps), new Action<BlockedApp>(this.detach_BlockedApps));
			this._Windows = new EntitySet<Window>(new Action<Window>(this.attach_Windows), new Action<Window>(this.detach_Windows));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string WinName
		{
			get
			{
				return this._WinName;
			}
			set
			{
				if ((this._WinName != value))
				{
					this.OnWinNameChanging(value);
					this.SendPropertyChanging();
					this._WinName = value;
					this.SendPropertyChanged("WinName");
					this.OnWinNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Apps_Users", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteOnNull=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Applications.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Applications.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AppsToBlock_Apps", Storage="_AppsToBlocks", ThisKey="ApplicationID", OtherKey="ApplicationID", DeleteRule="CASCADE")]
		public EntitySet<AppsToBlock> AppsToBlocks
		{
			get
			{
				return this._AppsToBlocks;
			}
			set
			{
				this._AppsToBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Blocked_Applications", Storage="_BlockedApps", ThisKey="ApplicationID", OtherKey="ApplicationID", DeleteRule="NO ACTION")]
		public EntitySet<BlockedApp> BlockedApps
		{
			get
			{
				return this._BlockedApps;
			}
			set
			{
				this._BlockedApps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Windows_Apps", Storage="_Windows", ThisKey="ApplicationID", OtherKey="ApplicationID", DeleteRule="CASCADE")]
		public EntitySet<Window> Windows
		{
			get
			{
				return this._Windows;
			}
			set
			{
				this._Windows.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppsToBlocks(AppsToBlock entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_AppsToBlocks(AppsToBlock entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
		
		private void attach_BlockedApps(BlockedApp entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_BlockedApps(BlockedApp entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
		
		private void attach_Windows(Window entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_Windows(Window entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class AppsToBlock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppsToBlockID;
		
		private int _UserID;
		
		private int _ApplicationID;
		
		private EntityRef<Application> _Application;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppsToBlockIDChanging(int value);
    partial void OnAppsToBlockIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnApplicationIDChanging(int value);
    partial void OnApplicationIDChanged();
    #endregion
		
		public AppsToBlock()
		{
			this._Application = default(EntityRef<Application>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppsToBlockID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AppsToBlockID
		{
			get
			{
				return this._AppsToBlockID;
			}
			set
			{
				if ((this._AppsToBlockID != value))
				{
					this.OnAppsToBlockIDChanging(value);
					this.SendPropertyChanging();
					this._AppsToBlockID = value;
					this.SendPropertyChanged("AppsToBlockID");
					this.OnAppsToBlockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="Int NOT NULL")]
		public int ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AppsToBlock_Apps", Storage="_Application", ThisKey="ApplicationID", OtherKey="ApplicationID", IsForeignKey=true, DeleteOnNull=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.AppsToBlocks.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.AppsToBlocks.Add(this);
						this._ApplicationID = value.ApplicationID;
					}
					else
					{
						this._ApplicationID = default(int);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AppsToBlock_Users", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AppsToBlocks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AppsToBlocks.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="BlockedApps")]
	public partial class BlockedApp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlockedAppID;
		
		private int _UserID;
		
		private System.DateTime _Date;
		
		private int _ApplicationID;
		
		private EntityRef<Application> _Application;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlockedAppIDChanging(int value);
    partial void OnBlockedAppIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnApplicationIDChanging(int value);
    partial void OnApplicationIDChanged();
    #endregion
		
		public BlockedApp()
		{
			this._Application = default(EntityRef<Application>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockedAppID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlockedAppID
		{
			get
			{
				return this._BlockedAppID;
			}
			set
			{
				if ((this._BlockedAppID != value))
				{
					this.OnBlockedAppIDChanging(value);
					this.SendPropertyChanging();
					this._BlockedAppID = value;
					this.SendPropertyChanged("BlockedAppID");
					this.OnBlockedAppIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="Int NOT NULL")]
		public int ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Blocked_Applications", Storage="_Application", ThisKey="ApplicationID", OtherKey="ApplicationID", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.BlockedApps.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.BlockedApps.Add(this);
						this._ApplicationID = value.ApplicationID;
					}
					else
					{
						this._ApplicationID = default(int);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Blocked_Users", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BlockedApps.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BlockedApps.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="FileLogs")]
	public partial class FileLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileLogID;
		
		private string _Path;
		
		private string _NewPath;
		
		private string _Event;
		
		private System.DateTime _Date;
		
		private int _UserID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileLogIDChanging(int value);
    partial void OnFileLogIDChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnNewPathChanging(string value);
    partial void OnNewPathChanged();
    partial void OnEventChanging(string value);
    partial void OnEventChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public FileLog()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileLogID
		{
			get
			{
				return this._FileLogID;
			}
			set
			{
				if ((this._FileLogID != value))
				{
					this.OnFileLogIDChanging(value);
					this.SendPropertyChanging();
					this._FileLogID = value;
					this.SendPropertyChanged("FileLogID");
					this.OnFileLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewPath", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string NewPath
		{
			get
			{
				return this._NewPath;
			}
			set
			{
				if ((this._NewPath != value))
				{
					this.OnNewPathChanging(value);
					this.SendPropertyChanging();
					this._NewPath = value;
					this.SendPropertyChanged("NewPath");
					this.OnNewPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Event
		{
			get
			{
				return this._Event;
			}
			set
			{
				if ((this._Event != value))
				{
					this.OnEventChanging(value);
					this.SendPropertyChanging();
					this._Event = value;
					this.SendPropertyChanged("Event");
					this.OnEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_FileLogs_Users", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.FileLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.FileLogs.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Logins")]
	public partial class Login : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LoginID;
		
		private int _UserID;
		
		private System.DateTime _LoginDate;
		
		private System.Nullable<System.DateTime> _LogoffDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginIDChanging(int value);
    partial void OnLoginIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLoginDateChanging(System.DateTime value);
    partial void OnLoginDateChanged();
    partial void OnLogoffDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLogoffDateChanged();
    #endregion
		
		public Login()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LoginID
		{
			get
			{
				return this._LoginID;
			}
			set
			{
				if ((this._LoginID != value))
				{
					this.OnLoginIDChanging(value);
					this.SendPropertyChanging();
					this._LoginID = value;
					this.SendPropertyChanged("LoginID");
					this.OnLoginIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LoginDate
		{
			get
			{
				return this._LoginDate;
			}
			set
			{
				if ((this._LoginDate != value))
				{
					this.OnLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LoginDate = value;
					this.SendPropertyChanged("LoginDate");
					this.OnLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoffDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LogoffDate
		{
			get
			{
				return this._LogoffDate;
			}
			set
			{
				if ((this._LogoffDate != value))
				{
					this.OnLogoffDateChanging(value);
					this.SendPropertyChanging();
					this._LogoffDate = value;
					this.SendPropertyChanged("LogoffDate");
					this.OnLogoffDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Logins_Users", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Logins.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Logins.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Logs")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private int _WindowID;
		
		private long _Duration;
		
		private System.DateTime _DateCreated;
		
		private string _Keystrokes;
		
		private string _KeystrokesRaw;
		
		private EntityRef<Window> _Window;
		
		private EntitySet<Screenshot> _Screenshots;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnWindowIDChanging(int value);
    partial void OnWindowIDChanged();
    partial void OnDurationChanging(long value);
    partial void OnDurationChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnKeystrokesChanging(string value);
    partial void OnKeystrokesChanged();
    partial void OnKeystrokesRawChanging(string value);
    partial void OnKeystrokesRawChanged();
    #endregion
		
		public Log()
		{
			this._Window = default(EntityRef<Window>);
			this._Screenshots = new EntitySet<Screenshot>(new Action<Screenshot>(this.attach_Screenshots), new Action<Screenshot>(this.detach_Screenshots));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WindowID", DbType="Int NOT NULL")]
		public int WindowID
		{
			get
			{
				return this._WindowID;
			}
			set
			{
				if ((this._WindowID != value))
				{
					if (this._Window.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWindowIDChanging(value);
					this.SendPropertyChanging();
					this._WindowID = value;
					this.SendPropertyChanged("WindowID");
					this.OnWindowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="BigInt NOT NULL")]
		public long Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keystrokes", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Keystrokes
		{
			get
			{
				return this._Keystrokes;
			}
			set
			{
				if ((this._Keystrokes != value))
				{
					this.OnKeystrokesChanging(value);
					this.SendPropertyChanging();
					this._Keystrokes = value;
					this.SendPropertyChanged("Keystrokes");
					this.OnKeystrokesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeystrokesRaw", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string KeystrokesRaw
		{
			get
			{
				return this._KeystrokesRaw;
			}
			set
			{
				if ((this._KeystrokesRaw != value))
				{
					this.OnKeystrokesRawChanging(value);
					this.SendPropertyChanging();
					this._KeystrokesRaw = value;
					this.SendPropertyChanged("KeystrokesRaw");
					this.OnKeystrokesRawChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Logs_Windows", Storage="_Window", ThisKey="WindowID", OtherKey="WindowID", IsForeignKey=true, DeleteOnNull=true)]
		public Window Window
		{
			get
			{
				return this._Window.Entity;
			}
			set
			{
				Window previousValue = this._Window.Entity;
				if (((previousValue != value) 
							|| (this._Window.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Window.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Window.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._WindowID = value.WindowID;
					}
					else
					{
						this._WindowID = default(int);
					}
					this.SendPropertyChanged("Window");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Screenshots_Logs", Storage="_Screenshots", ThisKey="LogID", OtherKey="LogID", DeleteRule="CASCADE")]
		public EntitySet<Screenshot> Screenshots
		{
			get
			{
				return this._Screenshots;
			}
			set
			{
				this._Screenshots.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Screenshots(Screenshot entity)
		{
			this.SendPropertyChanging();
			entity.Log = this;
		}
		
		private void detach_Screenshots(Screenshot entity)
		{
			this.SendPropertyChanging();
			entity.Log = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Screenshots")]
	public partial class Screenshot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScreenshotID;
		
		private string _Path;
		
		private string _FileName;
		
		private string _FileSize;
		
		private double _PopupWidth;
		
		private double _PopupHeight;
		
		private System.DateTime _Date;
		
		private int _Width;
		
		private int _Height;
		
		private int _LogID;
		
		private EntityRef<Log> _Log;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScreenshotIDChanging(int value);
    partial void OnScreenshotIDChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileSizeChanging(string value);
    partial void OnFileSizeChanged();
    partial void OnPopupWidthChanging(double value);
    partial void OnPopupWidthChanged();
    partial void OnPopupHeightChanging(double value);
    partial void OnPopupHeightChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnWidthChanging(int value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(int value);
    partial void OnHeightChanged();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    #endregion
		
		public Screenshot()
		{
			this._Log = default(EntityRef<Log>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenshotID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScreenshotID
		{
			get
			{
				return this._ScreenshotID;
			}
			set
			{
				if ((this._ScreenshotID != value))
				{
					this.OnScreenshotIDChanging(value);
					this.SendPropertyChanging();
					this._ScreenshotID = value;
					this.SendPropertyChanged("ScreenshotID");
					this.OnScreenshotIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileSize", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FileSize
		{
			get
			{
				return this._FileSize;
			}
			set
			{
				if ((this._FileSize != value))
				{
					this.OnFileSizeChanging(value);
					this.SendPropertyChanging();
					this._FileSize = value;
					this.SendPropertyChanged("FileSize");
					this.OnFileSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PopupWidth", DbType="Float NOT NULL")]
		public double PopupWidth
		{
			get
			{
				return this._PopupWidth;
			}
			set
			{
				if ((this._PopupWidth != value))
				{
					this.OnPopupWidthChanging(value);
					this.SendPropertyChanging();
					this._PopupWidth = value;
					this.SendPropertyChanged("PopupWidth");
					this.OnPopupWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PopupHeight", DbType="Float NOT NULL")]
		public double PopupHeight
		{
			get
			{
				return this._PopupHeight;
			}
			set
			{
				if ((this._PopupHeight != value))
				{
					this.OnPopupHeightChanging(value);
					this.SendPropertyChanging();
					this._PopupHeight = value;
					this.SendPropertyChanged("PopupHeight");
					this.OnPopupHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int NOT NULL")]
		public int Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int NOT NULL")]
		public int Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", DbType="Int NOT NULL")]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					if (this._Log.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Screenshots_Logs", Storage="_Log", ThisKey="LogID", OtherKey="LogID", IsForeignKey=true, DeleteOnNull=true)]
		public Log Log
		{
			get
			{
				return this._Log.Entity;
			}
			set
			{
				Log previousValue = this._Log.Entity;
				if (((previousValue != value) 
							|| (this._Log.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Log.Entity = null;
						previousValue.Screenshots.Remove(this);
					}
					this._Log.Entity = value;
					if ((value != null))
					{
						value.Screenshots.Add(this);
						this._LogID = value.LogID;
					}
					else
					{
						this._LogID = default(int);
					}
					this.SendPropertyChanged("Log");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Settings")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SettingsID;
		
		private bool _Licence;
		
		private bool _RunAtStartup;
		
		private bool _EnableKeylogger;
		
		private bool _TakeScreenshots;
		
		private bool _Stealth;
		
		private bool _EnableFileWatcher;
		
		private bool _FileWatcherSubdirectories;
		
		private bool _IsMasterPasswordSet;
		
		private bool _DeleteOldLogs;
		
		private bool _EnableEmailReports;
		
		private bool _EmailSSL;
		
		private bool _LightTheme;
		
		private bool _FirstRun;
		
		private bool _LoggingEnabled;
		
		private int _EmailSmtpPort;
		
		private string _EmailTo;
		
		private string _EmailFrom;
		
		private string _EmailSmtpHost;
		
		private string _EmailSmtpUsername;
		
		private string _EmailSmtpPassword;
		
		private double _EmailInterval;
		
		private double _TimerInterval;
		
		private string _FileWatcherPath;
		
		private short _OldLogDeleteDays;
		
		private double _ScreenshotQuality;
		
		private double _MainWindowLeft;
		
		private double _MainWindowTop;
		
		private double _MainWindowWidth;
		
		private double _MainWindowHeight;
		
		private string _WindowOpen;
		
		private System.DateTime _TrialStartDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingsIDChanging(int value);
    partial void OnSettingsIDChanged();
    partial void OnLicenceChanging(bool value);
    partial void OnLicenceChanged();
    partial void OnRunAtStartupChanging(bool value);
    partial void OnRunAtStartupChanged();
    partial void OnEnableKeyloggerChanging(bool value);
    partial void OnEnableKeyloggerChanged();
    partial void OnTakeScreenshotsChanging(bool value);
    partial void OnTakeScreenshotsChanged();
    partial void OnStealthChanging(bool value);
    partial void OnStealthChanged();
    partial void OnEnableFileWatcherChanging(bool value);
    partial void OnEnableFileWatcherChanged();
    partial void OnFileWatcherSubdirectoriesChanging(bool value);
    partial void OnFileWatcherSubdirectoriesChanged();
    partial void OnIsMasterPasswordSetChanging(bool value);
    partial void OnIsMasterPasswordSetChanged();
    partial void OnDeleteOldLogsChanging(bool value);
    partial void OnDeleteOldLogsChanged();
    partial void OnEnableEmailReportsChanging(bool value);
    partial void OnEnableEmailReportsChanged();
    partial void OnEmailSSLChanging(bool value);
    partial void OnEmailSSLChanged();
    partial void OnLightThemeChanging(bool value);
    partial void OnLightThemeChanged();
    partial void OnFirstRunChanging(bool value);
    partial void OnFirstRunChanged();
    partial void OnLoggingEnabledChanging(bool value);
    partial void OnLoggingEnabledChanged();
    partial void OnEmailSmtpPortChanging(int value);
    partial void OnEmailSmtpPortChanged();
    partial void OnEmailToChanging(string value);
    partial void OnEmailToChanged();
    partial void OnEmailFromChanging(string value);
    partial void OnEmailFromChanged();
    partial void OnEmailSmtpHostChanging(string value);
    partial void OnEmailSmtpHostChanged();
    partial void OnEmailSmtpUsernameChanging(string value);
    partial void OnEmailSmtpUsernameChanged();
    partial void OnEmailSmtpPasswordChanging(string value);
    partial void OnEmailSmtpPasswordChanged();
    partial void OnEmailIntervalChanging(double value);
    partial void OnEmailIntervalChanged();
    partial void OnTimerIntervalChanging(double value);
    partial void OnTimerIntervalChanged();
    partial void OnFileWatcherPathChanging(string value);
    partial void OnFileWatcherPathChanged();
    partial void OnOldLogDeleteDaysChanging(short value);
    partial void OnOldLogDeleteDaysChanged();
    partial void OnScreenshotQualityChanging(double value);
    partial void OnScreenshotQualityChanged();
    partial void OnMainWindowLeftChanging(double value);
    partial void OnMainWindowLeftChanged();
    partial void OnMainWindowTopChanging(double value);
    partial void OnMainWindowTopChanged();
    partial void OnMainWindowWidthChanging(double value);
    partial void OnMainWindowWidthChanged();
    partial void OnMainWindowHeightChanging(double value);
    partial void OnMainWindowHeightChanged();
    partial void OnWindowOpenChanging(string value);
    partial void OnWindowOpenChanged();
    partial void OnTrialStartDateChanging(System.DateTime value);
    partial void OnTrialStartDateChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SettingsID
		{
			get
			{
				return this._SettingsID;
			}
			set
			{
				if ((this._SettingsID != value))
				{
					this.OnSettingsIDChanging(value);
					this.SendPropertyChanging();
					this._SettingsID = value;
					this.SendPropertyChanged("SettingsID");
					this.OnSettingsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Licence", DbType="Bit NOT NULL")]
		public bool Licence
		{
			get
			{
				return this._Licence;
			}
			set
			{
				if ((this._Licence != value))
				{
					this.OnLicenceChanging(value);
					this.SendPropertyChanging();
					this._Licence = value;
					this.SendPropertyChanged("Licence");
					this.OnLicenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunAtStartup", DbType="Bit NOT NULL")]
		public bool RunAtStartup
		{
			get
			{
				return this._RunAtStartup;
			}
			set
			{
				if ((this._RunAtStartup != value))
				{
					this.OnRunAtStartupChanging(value);
					this.SendPropertyChanging();
					this._RunAtStartup = value;
					this.SendPropertyChanged("RunAtStartup");
					this.OnRunAtStartupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnableKeylogger", DbType="Bit NOT NULL")]
		public bool EnableKeylogger
		{
			get
			{
				return this._EnableKeylogger;
			}
			set
			{
				if ((this._EnableKeylogger != value))
				{
					this.OnEnableKeyloggerChanging(value);
					this.SendPropertyChanging();
					this._EnableKeylogger = value;
					this.SendPropertyChanged("EnableKeylogger");
					this.OnEnableKeyloggerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TakeScreenshots", DbType="Bit NOT NULL")]
		public bool TakeScreenshots
		{
			get
			{
				return this._TakeScreenshots;
			}
			set
			{
				if ((this._TakeScreenshots != value))
				{
					this.OnTakeScreenshotsChanging(value);
					this.SendPropertyChanging();
					this._TakeScreenshots = value;
					this.SendPropertyChanged("TakeScreenshots");
					this.OnTakeScreenshotsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stealth", DbType="Bit NOT NULL")]
		public bool Stealth
		{
			get
			{
				return this._Stealth;
			}
			set
			{
				if ((this._Stealth != value))
				{
					this.OnStealthChanging(value);
					this.SendPropertyChanging();
					this._Stealth = value;
					this.SendPropertyChanged("Stealth");
					this.OnStealthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnableFileWatcher", DbType="Bit NOT NULL")]
		public bool EnableFileWatcher
		{
			get
			{
				return this._EnableFileWatcher;
			}
			set
			{
				if ((this._EnableFileWatcher != value))
				{
					this.OnEnableFileWatcherChanging(value);
					this.SendPropertyChanging();
					this._EnableFileWatcher = value;
					this.SendPropertyChanged("EnableFileWatcher");
					this.OnEnableFileWatcherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileWatcherSubdirectories", DbType="Bit NOT NULL")]
		public bool FileWatcherSubdirectories
		{
			get
			{
				return this._FileWatcherSubdirectories;
			}
			set
			{
				if ((this._FileWatcherSubdirectories != value))
				{
					this.OnFileWatcherSubdirectoriesChanging(value);
					this.SendPropertyChanging();
					this._FileWatcherSubdirectories = value;
					this.SendPropertyChanged("FileWatcherSubdirectories");
					this.OnFileWatcherSubdirectoriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMasterPasswordSet", DbType="Bit NOT NULL")]
		public bool IsMasterPasswordSet
		{
			get
			{
				return this._IsMasterPasswordSet;
			}
			set
			{
				if ((this._IsMasterPasswordSet != value))
				{
					this.OnIsMasterPasswordSetChanging(value);
					this.SendPropertyChanging();
					this._IsMasterPasswordSet = value;
					this.SendPropertyChanged("IsMasterPasswordSet");
					this.OnIsMasterPasswordSetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteOldLogs", DbType="Bit NOT NULL")]
		public bool DeleteOldLogs
		{
			get
			{
				return this._DeleteOldLogs;
			}
			set
			{
				if ((this._DeleteOldLogs != value))
				{
					this.OnDeleteOldLogsChanging(value);
					this.SendPropertyChanging();
					this._DeleteOldLogs = value;
					this.SendPropertyChanged("DeleteOldLogs");
					this.OnDeleteOldLogsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnableEmailReports", DbType="Bit NOT NULL")]
		public bool EnableEmailReports
		{
			get
			{
				return this._EnableEmailReports;
			}
			set
			{
				if ((this._EnableEmailReports != value))
				{
					this.OnEnableEmailReportsChanging(value);
					this.SendPropertyChanging();
					this._EnableEmailReports = value;
					this.SendPropertyChanged("EnableEmailReports");
					this.OnEnableEmailReportsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailSSL", DbType="Bit NOT NULL")]
		public bool EmailSSL
		{
			get
			{
				return this._EmailSSL;
			}
			set
			{
				if ((this._EmailSSL != value))
				{
					this.OnEmailSSLChanging(value);
					this.SendPropertyChanging();
					this._EmailSSL = value;
					this.SendPropertyChanged("EmailSSL");
					this.OnEmailSSLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LightTheme", DbType="Bit NOT NULL")]
		public bool LightTheme
		{
			get
			{
				return this._LightTheme;
			}
			set
			{
				if ((this._LightTheme != value))
				{
					this.OnLightThemeChanging(value);
					this.SendPropertyChanging();
					this._LightTheme = value;
					this.SendPropertyChanged("LightTheme");
					this.OnLightThemeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstRun", DbType="Bit NOT NULL")]
		public bool FirstRun
		{
			get
			{
				return this._FirstRun;
			}
			set
			{
				if ((this._FirstRun != value))
				{
					this.OnFirstRunChanging(value);
					this.SendPropertyChanging();
					this._FirstRun = value;
					this.SendPropertyChanged("FirstRun");
					this.OnFirstRunChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoggingEnabled", DbType="Bit NOT NULL")]
		public bool LoggingEnabled
		{
			get
			{
				return this._LoggingEnabled;
			}
			set
			{
				if ((this._LoggingEnabled != value))
				{
					this.OnLoggingEnabledChanging(value);
					this.SendPropertyChanging();
					this._LoggingEnabled = value;
					this.SendPropertyChanged("LoggingEnabled");
					this.OnLoggingEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailSmtpPort", DbType="Int NOT NULL")]
		public int EmailSmtpPort
		{
			get
			{
				return this._EmailSmtpPort;
			}
			set
			{
				if ((this._EmailSmtpPort != value))
				{
					this.OnEmailSmtpPortChanging(value);
					this.SendPropertyChanging();
					this._EmailSmtpPort = value;
					this.SendPropertyChanged("EmailSmtpPort");
					this.OnEmailSmtpPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailTo", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmailTo
		{
			get
			{
				return this._EmailTo;
			}
			set
			{
				if ((this._EmailTo != value))
				{
					this.OnEmailToChanging(value);
					this.SendPropertyChanging();
					this._EmailTo = value;
					this.SendPropertyChanged("EmailTo");
					this.OnEmailToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailFrom", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmailFrom
		{
			get
			{
				return this._EmailFrom;
			}
			set
			{
				if ((this._EmailFrom != value))
				{
					this.OnEmailFromChanging(value);
					this.SendPropertyChanging();
					this._EmailFrom = value;
					this.SendPropertyChanged("EmailFrom");
					this.OnEmailFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailSmtpHost", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmailSmtpHost
		{
			get
			{
				return this._EmailSmtpHost;
			}
			set
			{
				if ((this._EmailSmtpHost != value))
				{
					this.OnEmailSmtpHostChanging(value);
					this.SendPropertyChanging();
					this._EmailSmtpHost = value;
					this.SendPropertyChanged("EmailSmtpHost");
					this.OnEmailSmtpHostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailSmtpUsername", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmailSmtpUsername
		{
			get
			{
				return this._EmailSmtpUsername;
			}
			set
			{
				if ((this._EmailSmtpUsername != value))
				{
					this.OnEmailSmtpUsernameChanging(value);
					this.SendPropertyChanging();
					this._EmailSmtpUsername = value;
					this.SendPropertyChanged("EmailSmtpUsername");
					this.OnEmailSmtpUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailSmtpPassword", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmailSmtpPassword
		{
			get
			{
				return this._EmailSmtpPassword;
			}
			set
			{
				if ((this._EmailSmtpPassword != value))
				{
					this.OnEmailSmtpPasswordChanging(value);
					this.SendPropertyChanging();
					this._EmailSmtpPassword = value;
					this.SendPropertyChanged("EmailSmtpPassword");
					this.OnEmailSmtpPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailInterval", DbType="Float NOT NULL")]
		public double EmailInterval
		{
			get
			{
				return this._EmailInterval;
			}
			set
			{
				if ((this._EmailInterval != value))
				{
					this.OnEmailIntervalChanging(value);
					this.SendPropertyChanging();
					this._EmailInterval = value;
					this.SendPropertyChanged("EmailInterval");
					this.OnEmailIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimerInterval", DbType="Float NOT NULL")]
		public double TimerInterval
		{
			get
			{
				return this._TimerInterval;
			}
			set
			{
				if ((this._TimerInterval != value))
				{
					this.OnTimerIntervalChanging(value);
					this.SendPropertyChanging();
					this._TimerInterval = value;
					this.SendPropertyChanged("TimerInterval");
					this.OnTimerIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileWatcherPath", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string FileWatcherPath
		{
			get
			{
				return this._FileWatcherPath;
			}
			set
			{
				if ((this._FileWatcherPath != value))
				{
					this.OnFileWatcherPathChanging(value);
					this.SendPropertyChanging();
					this._FileWatcherPath = value;
					this.SendPropertyChanged("FileWatcherPath");
					this.OnFileWatcherPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldLogDeleteDays", DbType="SmallInt NOT NULL")]
		public short OldLogDeleteDays
		{
			get
			{
				return this._OldLogDeleteDays;
			}
			set
			{
				if ((this._OldLogDeleteDays != value))
				{
					this.OnOldLogDeleteDaysChanging(value);
					this.SendPropertyChanging();
					this._OldLogDeleteDays = value;
					this.SendPropertyChanged("OldLogDeleteDays");
					this.OnOldLogDeleteDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenshotQuality", DbType="Float NOT NULL")]
		public double ScreenshotQuality
		{
			get
			{
				return this._ScreenshotQuality;
			}
			set
			{
				if ((this._ScreenshotQuality != value))
				{
					this.OnScreenshotQualityChanging(value);
					this.SendPropertyChanging();
					this._ScreenshotQuality = value;
					this.SendPropertyChanged("ScreenshotQuality");
					this.OnScreenshotQualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainWindowLeft", DbType="Float NOT NULL")]
		public double MainWindowLeft
		{
			get
			{
				return this._MainWindowLeft;
			}
			set
			{
				if ((this._MainWindowLeft != value))
				{
					this.OnMainWindowLeftChanging(value);
					this.SendPropertyChanging();
					this._MainWindowLeft = value;
					this.SendPropertyChanged("MainWindowLeft");
					this.OnMainWindowLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainWindowTop", DbType="Float NOT NULL")]
		public double MainWindowTop
		{
			get
			{
				return this._MainWindowTop;
			}
			set
			{
				if ((this._MainWindowTop != value))
				{
					this.OnMainWindowTopChanging(value);
					this.SendPropertyChanging();
					this._MainWindowTop = value;
					this.SendPropertyChanged("MainWindowTop");
					this.OnMainWindowTopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainWindowWidth", DbType="Float NOT NULL")]
		public double MainWindowWidth
		{
			get
			{
				return this._MainWindowWidth;
			}
			set
			{
				if ((this._MainWindowWidth != value))
				{
					this.OnMainWindowWidthChanging(value);
					this.SendPropertyChanging();
					this._MainWindowWidth = value;
					this.SendPropertyChanged("MainWindowWidth");
					this.OnMainWindowWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainWindowHeight", DbType="Float NOT NULL")]
		public double MainWindowHeight
		{
			get
			{
				return this._MainWindowHeight;
			}
			set
			{
				if ((this._MainWindowHeight != value))
				{
					this.OnMainWindowHeightChanging(value);
					this.SendPropertyChanging();
					this._MainWindowHeight = value;
					this.SendPropertyChanged("MainWindowHeight");
					this.OnMainWindowHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WindowOpen", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string WindowOpen
		{
			get
			{
				return this._WindowOpen;
			}
			set
			{
				if ((this._WindowOpen != value))
				{
					this.OnWindowOpenChanging(value);
					this.SendPropertyChanging();
					this._WindowOpen = value;
					this.SendPropertyChanged("WindowOpen");
					this.OnWindowOpenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrialStartDate", DbType="DateTime NOT NULL")]
		public System.DateTime TrialStartDate
		{
			get
			{
				return this._TrialStartDate;
			}
			set
			{
				if ((this._TrialStartDate != value))
				{
					this.OnTrialStartDateChanging(value);
					this.SendPropertyChanging();
					this._TrialStartDate = value;
					this.SendPropertyChanged("TrialStartDate");
					this.OnTrialStartDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Name;
		
		private EntitySet<Application> _Applications;
		
		private EntitySet<AppsToBlock> _AppsToBlocks;
		
		private EntitySet<BlockedApp> _BlockedApps;
		
		private EntitySet<FileLog> _FileLogs;
		
		private EntitySet<Login> _Logins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public User()
		{
			this._Applications = new EntitySet<Application>(new Action<Application>(this.attach_Applications), new Action<Application>(this.detach_Applications));
			this._AppsToBlocks = new EntitySet<AppsToBlock>(new Action<AppsToBlock>(this.attach_AppsToBlocks), new Action<AppsToBlock>(this.detach_AppsToBlocks));
			this._BlockedApps = new EntitySet<BlockedApp>(new Action<BlockedApp>(this.attach_BlockedApps), new Action<BlockedApp>(this.detach_BlockedApps));
			this._FileLogs = new EntitySet<FileLog>(new Action<FileLog>(this.attach_FileLogs), new Action<FileLog>(this.detach_FileLogs));
			this._Logins = new EntitySet<Login>(new Action<Login>(this.attach_Logins), new Action<Login>(this.detach_Logins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Apps_Users", Storage="_Applications", ThisKey="UserID", OtherKey="UserID", DeleteRule="CASCADE")]
		public EntitySet<Application> Applications
		{
			get
			{
				return this._Applications;
			}
			set
			{
				this._Applications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AppsToBlock_Users", Storage="_AppsToBlocks", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
		public EntitySet<AppsToBlock> AppsToBlocks
		{
			get
			{
				return this._AppsToBlocks;
			}
			set
			{
				this._AppsToBlocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Blocked_Users", Storage="_BlockedApps", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
		public EntitySet<BlockedApp> BlockedApps
		{
			get
			{
				return this._BlockedApps;
			}
			set
			{
				this._BlockedApps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_FileLogs_Users", Storage="_FileLogs", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
		public EntitySet<FileLog> FileLogs
		{
			get
			{
				return this._FileLogs;
			}
			set
			{
				this._FileLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Logins_Users", Storage="_Logins", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
		public EntitySet<Login> Logins
		{
			get
			{
				return this._Logins;
			}
			set
			{
				this._Logins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Applications(Application entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Applications(Application entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_AppsToBlocks(AppsToBlock entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AppsToBlocks(AppsToBlock entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BlockedApps(BlockedApp entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BlockedApps(BlockedApp entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_FileLogs(FileLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_FileLogs(FileLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Logins(Login entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Logins(Login entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Windows")]
	public partial class Window : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WindowID;
		
		private int _ApplicationID;
		
		private string _Title;
		
		private EntitySet<Log> _Logs;
		
		private EntityRef<Application> _Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWindowIDChanging(int value);
    partial void OnWindowIDChanged();
    partial void OnApplicationIDChanging(int value);
    partial void OnApplicationIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Window()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Application = default(EntityRef<Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WindowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WindowID
		{
			get
			{
				return this._WindowID;
			}
			set
			{
				if ((this._WindowID != value))
				{
					this.OnWindowIDChanging(value);
					this.SendPropertyChanging();
					this._WindowID = value;
					this.SendPropertyChanged("WindowID");
					this.OnWindowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="Int NOT NULL")]
		public int ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Logs_Windows", Storage="_Logs", ThisKey="WindowID", OtherKey="WindowID", DeleteRule="CASCADE")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Windows_Apps", Storage="_Application", ThisKey="ApplicationID", OtherKey="ApplicationID", IsForeignKey=true, DeleteOnNull=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.Windows.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.Windows.Add(this);
						this._ApplicationID = value.ApplicationID;
					}
					else
					{
						this._ApplicationID = default(int);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Window = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Window = null;
		}
	}
}
#pragma warning restore 1591
